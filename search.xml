<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JavaScript全攻略(1) ： 語法解析器、執行環境與詞彙環境</title>
      <link href="/JavaScript/2019/09/18/javascript-weird-1/"/>
      <url>/JavaScript/2019/09/18/javascript-weird-1/</url>
      
        <content type="html"><![CDATA[<p>第一篇先記錄一些關於JavaScript的名詞解釋,</p><p>之後會不斷的遇到這些觀念,</p><p>這些名詞聽起來好像很複雜其實都不難懂,</p><p>因此我們先來瞭解這些名詞的意義吧！</p><hr><h2 id="syntax-parser-語法解析器"><a href="#syntax-parser-語法解析器" class="headerlink" title="syntax parser(語法解析器)"></a>syntax parser(語法解析器)</h2><blockquote><p>A program that reads your code and determines what it does and if its grammar is valid.<br>語法解析器：指直譯器或編譯器，將你所寫的程式轉換成電腦能懂得語言。</p></blockquote><p>我們所寫的程式碼並不能直接告訴電腦該做什麼,</p><p>當我們寫了程式碼之後會透過別人所寫的另一個程式,</p><p>將我們所寫的程式電腦可以執行的指令,</p><p>而把我們的程式轉換成電腦可以懂的東西就是編譯器或直譯器,</p><p>也就是語法解析器。</p><hr><h3 id="Lexical-environments-詞彙環境"><a href="#Lexical-environments-詞彙環境" class="headerlink" title="Lexical environments(詞彙環境)"></a>Lexical environments(詞彙環境)</h3><blockquote><p>where somethings sits physically in the code you write.</p></blockquote><p>詞彙環境聽起來很複雜，</p><p>其實詞彙環境就是指程式碼的實際位置，</p><p>他被寫在哪?他的周圍環境是什麼?</p><p>對有些程式語言來說程式碼寫在哪很重要，</p><p>但不是每個程式語言都是，</p><p>而對JavaScript而言詞彙環境是重要的，</p><p>因為他的位置可以幫助語法解析器做決定。</p><hr><h3 id="Execution-contexts-執行環境"><a href="#Execution-contexts-執行環境" class="headerlink" title="Execution contexts(執行環境)"></a>Execution contexts(執行環境)</h3><blockquote><p>a wrapper to help manage the code that is running.</p></blockquote><p>執行環境管理正在執行的程式碼，</p><p>但裡面不只包含我們所寫的程式碼，</p><p>還有其他的東西以後會陸續的提到。</p><hr><h3 id="Name-value-pair-名稱-值配對"><a href="#Name-value-pair-名稱-值配對" class="headerlink" title="Name/value pair(名稱/值配對)"></a>Name/value pair(名稱/值配對)</h3><blockquote><p>a name which maps to a unique value.</p></blockquote><p>名稱可能會被定義很多次，但在給定一種情狀下它只能有一個值，</p><p>在任何一個執行環境中(一段正在執行的程式碼)，</p><p>同樣名稱只有一個，而這個名稱只能被一個值定義。</p><p>但這個值可以是另一個名稱/值的配對。</p><p>舉例來說：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Apartment: &#123;</span><br><span class="line">    floor: <span class="number">3</span>,</span><br><span class="line">    num: <span class="number">301</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Apartment</code>是名稱，</p><p>但他的值是更多的名稱/值配對的組合，</p><p>裡面的<code>floor</code>是另一個名稱對應值爲3，</p><p>以及名稱<code>num</code>對應值爲301。</p><hr><h3 id="Object-物件"><a href="#Object-物件" class="headerlink" title="Object(物件)"></a>Object(物件)</h3><blockquote><p>a collection of name value pairs</p></blockquote><p>而JavaScript的物件最簡單的定義就是名稱/值配對的組合，</p><p>如同我們上面的例子<code>Apartment</code>就是一個物件，</p><p>在其他的程式語言裡面物件或許有更複雜的定義，</p><p>但在JavaScript裡，物件的定義就只有這樣。</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
